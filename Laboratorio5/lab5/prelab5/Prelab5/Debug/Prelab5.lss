
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000039e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d0  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000780  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000419  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b5  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000221e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  88:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:




void initADC(void){
	ADMUX = 0;
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
	
	ADMUX |= (1 << ADLAR);	
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//on ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//int
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
	
	//pres 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
	
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);	//PC0 desabilita 
  c0:	ee e7       	ldi	r30, 0x7E	; 126
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <main>:

void initADC(void);

int main(void)
{
	cli();
  cc:	f8 94       	cli
	DDRB |= (1 << PORTB2) | ( 1 << PORTB1) ;		//PB6 Salida
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	86 60       	ori	r24, 0x06	; 6
  d2:	84 b9       	out	0x04, r24	; 4
	
	DDRC = 0;		//puestoc entradas
  d4:	17 b8       	out	0x07, r1	; 7
	
	DDRD |= (1 << PORTD5);		//PB6 salida
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	8a b9       	out	0x0a, r24	; 10
	
	TCCR0A |= (1  << WGM00) | (1 << WGM01) ;
	TCCR0A |= (1 << COM0B1);
	*/
	
	initFastPWM0();
  dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <initFastPWM0>
	canal0();
  e0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <canal0>
	//Prescaler 1024
	TCCR0B = 0x02;
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	85 bd       	out	0x25, r24	; 37
	
	initFastPWM1(2, 8);
  e8:	68 e0       	ldi	r22, 0x08	; 8
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	0e 94 16 01 	call	0x22c	; 0x22c <initFastPWM1>
	canal(2, 0);
  f0:	60 e0       	ldi	r22, 0x00	; 0
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <canal>
	canal(1,0);
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <canal>
	valorTOP(39999);
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9c e9       	ldi	r25, 0x9C	; 156
 104:	0e 94 4d 01 	call	0x29a	; 0x29a <valorTOP>
	
	
	initADC();
 108:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	sei();
 10c:	78 94       	sei
	ADCSRA |= (1 << ADSC);
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
 118:	ff cf       	rjmp	.-2      	; 0x118 <main+0x4c>

0000011a <__vector_21>:
	
	DIDR0 |= (1 << ADC0D) | (1 << ADC1D) | (1 << ADC2D);	//PC0 desabilita 
}


ISR (ADC_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	//mostrar valor ADC
	//apaga bandera
	ADCSRA |= (1 << ADIF);	
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	80 61       	ori	r24, 0x10	; 16
 144:	80 83       	st	Z, r24
	if (contador == 0){
 146:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	81 11       	cpse	r24, r1
 14c:	0f c0       	rjmp	.+30     	; 0x16c <__vector_21+0x52>
		contador = 1;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0);
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	80 83       	st	Z, r24
		salidaservo(ADCH, 1);
 15e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 5e 01 	call	0x2bc	; 0x2bc <salidaservo>
 16a:	1f c0       	rjmp	.+62     	; 0x1aa <__vector_21+0x90>
	}else if(contador == 1){
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	81 f4       	brne	.+32     	; 0x190 <__vector_21+0x76>
		contador = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0) | 0x01;
 176:	ec e7       	ldi	r30, 0x7C	; 124
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
		salidaservo(ADCH, 2);
 182:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <salidaservo>
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <__vector_21+0x90>
	}else if(contador == 2){
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	59 f4       	brne	.+22     	; 0x1aa <__vector_21+0x90>
		contador = 0;
 194:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		ADMUX = (ADMUX & 0xF0) | 0x02;
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	80 7f       	andi	r24, 0xF0	; 240
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
		OCR0B = ADCH;
 1a4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1a8:	88 bd       	out	0x28, r24	; 40
	}
	ADCSRA |= (1 << ADSC);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <initFastPWM0>:
 * Created: 22/04/2024 19:36:23
 *  Author: josea
 */ 
#include "PWM0.h"
void initFastPWM0(void){
		TCCR0A = 0;
 1d6:	14 bc       	out	0x24, r1	; 36
		TCCR0B = 0;
 1d8:	15 bc       	out	0x25, r1	; 37
		
		TCCR0A |= (1  << WGM00) | (1 << WGM01) ;//modo de op fastpwm
 1da:	84 b5       	in	r24, 0x24	; 36
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	84 bd       	out	0x24, r24	; 36
 1e0:	08 95       	ret

000001e2 <canal0>:
		
}

//modos canales
void canal0(void){
	TCCR0A |= (1 << COM0B1);
 1e2:	84 b5       	in	r24, 0x24	; 36
 1e4:	80 62       	ori	r24, 0x20	; 32
 1e6:	84 bd       	out	0x24, r24	; 36
 1e8:	08 95       	ret

000001ea <canal>:
uint16_t topVal = 0;
uint16_t i, j;		//varablies

//(canal <- 1/2, invertido  1/0)
void canal(uint8_t setCH, uint8_t invertido){
	switch(setCH){
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <canal+0xa>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	79 f0       	breq	.+30     	; 0x210 <canal+0x26>
 1f2:	08 95       	ret
		case 1:
			if(invertido == 1){
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	31 f4       	brne	.+12     	; 0x204 <canal+0x1a>
				TCCR1A |= (1 << COM1A0) | (1 << COM1A1);	//channel A invertido
 1f8:	e0 e8       	ldi	r30, 0x80	; 128
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	80 6c       	ori	r24, 0xC0	; 192
 200:	80 83       	st	Z, r24
 202:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1A1);					//channel A no invertido
 204:	e0 e8       	ldi	r30, 0x80	; 128
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret
			}
		break;
		
		case 2:
			if(invertido == 1){
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	31 f4       	brne	.+12     	; 0x220 <canal+0x36>
				TCCR1A |= (1 << COM1B0) | (1 << COM1B1);	//channelB invertido
 214:	e0 e8       	ldi	r30, 0x80	; 128
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	80 63       	ori	r24, 0x30	; 48
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret
			}else{
				TCCR1A |= (1 << COM1B1);					//channelB no invertido
 220:	e0 e8       	ldi	r30, 0x80	; 128
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 62       	ori	r24, 0x20	; 32
 228:	80 83       	st	Z, r24
 22a:	08 95       	ret

0000022c <initFastPWM1>:
}

/*configuracion para fastPWM
*/
void initFastPWM1(uint8_t modoPWM, uint16_t prescaler){	//initialize register timer1
	TCCR1A = 0;
 22c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 230:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	switch (prescaler)
 234:	68 30       	cpi	r22, 0x08	; 8
 236:	71 05       	cpc	r23, r1
 238:	21 f0       	breq	.+8      	; 0x242 <initFastPWM1+0x16>
 23a:	61 15       	cp	r22, r1
 23c:	74 40       	sbci	r23, 0x04	; 4
 23e:	39 f0       	breq	.+14     	; 0x24e <initFastPWM1+0x22>
 240:	0b c0       	rjmp	.+22     	; 0x258 <initFastPWM1+0x2c>
	{
		case 8:
			TCCR1B |= (1 << CS11);					//prescaler 8
 242:	e1 e8       	ldi	r30, 0x81	; 129
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	90 81       	ld	r25, Z
 248:	92 60       	ori	r25, 0x02	; 2
 24a:	90 83       	st	Z, r25
		break;
 24c:	05 c0       	rjmp	.+10     	; 0x258 <initFastPWM1+0x2c>
		
		case 1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);	//prescaler 1024
 24e:	e1 e8       	ldi	r30, 0x81	; 129
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	90 81       	ld	r25, Z
 254:	95 60       	ori	r25, 0x05	; 5
 256:	90 83       	st	Z, r25
		break;
	}
	
	//modo de opercion seleccionado
	switch (modoPWM)
 258:	81 30       	cpi	r24, 0x01	; 1
 25a:	19 f0       	breq	.+6      	; 0x262 <initFastPWM1+0x36>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	61 f0       	breq	.+24     	; 0x278 <initFastPWM1+0x4c>
 260:	08 95       	ret
	{
		case 1:
			//resolucion 10bits pwm
			TCCR1A |= (1 << WGM11) | (1 << WGM10);
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	83 60       	ori	r24, 0x03	; 3
 26a:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12);
 26c:	e1 e8       	ldi	r30, 0x81	; 129
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	88 60       	ori	r24, 0x08	; 8
 274:	80 83       	st	Z, r24
		break;
 276:	08 95       	ret
		
		case 2:
			//fast PWM con ICR1 en top
			TCCR1A |= (1 << WGM11);
 278:	e0 e8       	ldi	r30, 0x80	; 128
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
 282:	e1 e8       	ldi	r30, 0x81	; 129
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	88 61       	ori	r24, 0x18	; 24
 28a:	80 83       	st	Z, r24
			topVal = 1;		
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <topVal+0x1>
 294:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <topVal>
 298:	08 95       	ret

0000029a <valorTOP>:
	
}

//topValue, modo 2
void valorTOP(uint16_t top){
	if (topVal == 1)	{
 29a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <topVal>
 29e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <topVal+0x1>
 2a2:	21 30       	cpi	r18, 0x01	; 1
 2a4:	31 05       	cpc	r19, r1
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <valorTOP+0x18>
		ICR1 = top;		
 2a8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2b0:	08 95       	ret
	}else{
		topVal = 0;
 2b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <topVal+0x1>
 2b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <topVal>
 2ba:	08 95       	ret

000002bc <salidaservo>:
}

//conversion de servos, valores
void salidaservo(uint16_t pot, uint8_t chaselect){
	
	switch(chaselect){
 2bc:	61 30       	cpi	r22, 0x01	; 1
 2be:	19 f0       	breq	.+6      	; 0x2c6 <salidaservo+0xa>
 2c0:	62 30       	cpi	r22, 0x02	; 2
 2c2:	c9 f0       	breq	.+50     	; 0x2f6 <salidaservo+0x3a>
 2c4:	08 95       	ret
		case 1:
			i = ADCH;
 2c6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 2d0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
			j = (200/12)*i+1000;
 2d4:	82 95       	swap	r24
 2d6:	92 95       	swap	r25
 2d8:	90 7f       	andi	r25, 0xF0	; 240
 2da:	98 27       	eor	r25, r24
 2dc:	80 7f       	andi	r24, 0xF0	; 240
 2de:	98 27       	eor	r25, r24
 2e0:	88 51       	subi	r24, 0x18	; 24
 2e2:	9c 4f       	sbci	r25, 0xFC	; 252
 2e4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j+0x1>
 2e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j>
			OCR1A = j;
 2ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		break;
 2f4:	08 95       	ret
		
		case 2:
			i = ADCH;
 2f6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 300:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
			j = (200/12)*i+1000;
 304:	82 95       	swap	r24
 306:	92 95       	swap	r25
 308:	90 7f       	andi	r25, 0xF0	; 240
 30a:	98 27       	eor	r25, r24
 30c:	80 7f       	andi	r24, 0xF0	; 240
 30e:	98 27       	eor	r25, r24
 310:	88 51       	subi	r24, 0x18	; 24
 312:	9c 4f       	sbci	r25, 0xFC	; 252
 314:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <j+0x1>
 318:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <j>
			OCR1B = j;
 31c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 320:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
